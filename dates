#3rd function nextDay() is goal of first 2 functions; is_leap_year() and daysInMonths()#
#4th function dateIsAfter() is the loop for final function; daysBetweenDates()#

#determines if any year is a leap year#
#and returns correct day value#
def is_leap_year(year): 
  if year % 400 == 0:
    return 29 # 'leap year'
  elif year % 100 == 0:
    return 28 # 'not leap year'
  elif year % 4 == 0:
    return 29 # 'leap year'
  else:
    return 28 #'not leap year'

#returns the number of days in each month#    
def daysInMonths(year, month):
  daysOfMonths = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] #updated list version#
  if month == 2:
    return is_leap_year(year)
  else:
    return daysOfMonths[month - 1]# - 1 because list starts at 0#
    #if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:
    #return 31
    #else:
        #if month == 2:
            #return is_leap_year(year)#is_leap_year() is used to# 
        #return 30             #determine days in(2)Feb.#

#returns the next calendar day, 1 day at a time#  
def nextDay(year, month, day):
    if day < daysInMonths(year, month):#uses daysInMonths() to establish test pos#
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1

#is the test condition that makes daysBetweenDates loop#      
def dateIsAfter(year1, month1, day1, year2, month2, day2):
    """Returns True if year2, month2, day2 is after year1, month1, day1.  Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            if day1 < day2: #could be just return day1 < day2#
              return True
    return False        

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    days = 0
    while dateIsAfter(year1, month1, day1, year2, month2, day2) == True:#== True not needed#
        days += 1 #equals days = days + 1#
        (year1, month1, day1) = nextDay(year1, month1, day1)
    return days
# Test routine
def test():
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()

print ' JFK was shot! ' , daysBetweenDates(1963,11,22,2014,1,5) , ' Days Ago '
print ' JFK was shot! ' , daysBetweenDates(1963,11,22,2014,1,5) , ' Days Ago '
